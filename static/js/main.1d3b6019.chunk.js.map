{"version":3,"sources":["views/startPageView.js","views/createProfileView.js","App.js","serviceWorker.js","index.js","start_image.png"],"names":["StartPageView","props","activePanel","id","left","onClick","console","log","className","src","logo","alt","to","size","CreateProfileView","before","right","top","type","defaultValue","placeholder","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"6SA+CeA,MAxBf,SAAwBC,GACpB,OACI,kBAAC,IAAD,CAAMC,YAAY,QACd,kBAAC,IAAD,CAAOC,GAAG,QACN,kBAAC,IAAD,CAAaC,KAAM,kBAAC,IAAD,CAAiBC,QAAS,kBAAMC,QAAQC,IAAI,WAA/D,cAGA,kBAAC,IAAD,CAAKC,UAAY,SACb,yBAAKC,IAAKC,IAAMC,IAAI,SACpB,2BACI,8IAEJ,uBAAGH,UAAU,aACT,6BADJ,8ZAIJ,kBAAC,IAAD,CAAMI,GAAG,gBACT,kBAAC,IAAD,CAAQC,KAAK,KAAKL,UAAU,eAA5B,oE,kCCcDM,MAhCf,WACI,OACI,kBAAC,IAAD,CAAMZ,YAAY,QACd,kBAAC,IAAD,CAAOC,GAAG,QACN,kBAAC,IAAD,CAAaC,KAAM,kBAAC,IAAD,CAAiBC,QAAS,kBAAMC,QAAQC,IAAI,WAA/D,yFAGA,kBAAC,IAAD,CACIQ,OAAQ,kBAAC,IAAD,CAAQF,KAAM,GAAIJ,IAAK,iBACfO,MAAO,kBAAC,IAAD,KAAmB,kBAAC,IAAD,UAF9C,iEAMA,kBAAC,IAAD,CAAOR,UAAY,0BACf,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAiBS,IAAI,2BAAOT,UAAY,qBACpC,kBAAC,IAAD,CAAOU,KAAK,OAAOC,aAAa,MAEpC,kBAAC,IAAD,CAAiBF,IAAI,qBAAMT,UAAY,qBACnC,kBAAC,IAAD,CAAOU,KAAK,OAAOC,aAAa,MAEpC,kBAAC,IAAD,CAAUF,IAAI,mDAAWG,YAAY,OAG7C,kBAAC,IAAD,CAAMR,GAAG,KACT,kBAAC,IAAD,CAAQC,KAAK,KAAKL,UAAU,aAAaH,QAAS,kBAAMC,QAAQC,IAAI,SAApE,8D,OCODc,MAjCf,WACI,OACI,kBAAC,IAAD,KACI,6BAGI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,gBACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,WACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,KACR,kBAAC,EAAD,WCvBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,a,wCEzI5BC,EAAOC,QAAU,IAA0B,0C","file":"static/js/main.1d3b6019.chunk.js","sourcesContent":["// import React from 'react';\n// import Modal from '../components/modal.js';\n// import Modal from '../components/modalItem.js';\n\nimport React from 'react';\nimport {\n    View,\n    Panel,\n    PanelHeader,\n    PanelHeaderBack,\n    Button,\n    Div,\n\n} from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport logo from '../start_image.png';\nimport '../styles/app.css'\nimport {\n    Link\n} from \"react-router-dom\";\n\n\n\nfunction StartPageView (props) {\n    return (\n        <View activePanel=\"main\">\n            <Panel id=\"main\">\n                <PanelHeader left={<PanelHeaderBack onClick={() => console.log('hey')} />}>\n                    FriendsRun\n                </PanelHeader>\n                <Div className = \"image\">\n                    <img src={logo} alt=\"logo\" />\n                    <p>\n                        <strong >Привет дорогой друг!</strong>\n                    </p>\n                    <p className=\"startText\">\n                        <br/>Это приложение поможет тебе держать себя в форме, а также находить новых друзей\n                    </p>\n                </Div>\n                <Link to=\"/create-user\">\n                <Button size=\"xl\" className=\"startButton\">Продолжить</Button>\n                </Link>\n            </Panel>\n        </View>\n    );\n}\n\nexport default StartPageView;\n","import React from 'react';\nimport {\n    View,\n    Panel,\n    PanelHeader,\n    PanelHeaderBack,\n    Button,\n    PanelHeaderContent,\n    Avatar,\n    PanelHeaderButton,\n    Input,\n    FormLayoutGroup,\n    FormLayout, Group\n\n} from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport Icon28MessageOutline from '@vkontakte/icons/dist/28/message_outline'\nimport '../styles/app.css'\nimport Textarea from \"@vkontakte/vkui/dist/components/Textarea/Textarea\";\nimport {Link} from \"react-router-dom\";\n\n\nfunction CreateProfileView () {\n    return (\n        <View activePanel=\"main\">\n            <Panel id=\"main\">\n                <PanelHeader left={<PanelHeaderBack onClick={() => console.log('hey')} />}>\n                    Создать профиль\n                </PanelHeader>\n                <PanelHeaderContent\n                    before={<Avatar size={72} src={\"../logo512.png\"}\n                                    right={<PanelHeaderButton><Icon28MessageOutline /></PanelHeaderButton>}\n                    />}>\n                    Влад Анесов\n                </PanelHeaderContent>\n                <Group className = \"createProfilInputGroup\">\n                    <FormLayout >\n                        <FormLayoutGroup top=\"Рост\" className = \"createProfilInput\">\n                            <Input type=\"text\" defaultValue=\"\" />\n                        </FormLayoutGroup>\n                        <FormLayoutGroup top=\"Вес\" className = \"createProfilInput\">\n                            <Input type=\"text\" defaultValue=\"\" />\n                        </FormLayoutGroup>\n                        <Textarea top=\"Интересы\" placeholder=\"\" />\n                    </FormLayout>\n                </Group>\n                <Link to=\"/\">\n                <Button size=\"xl\" className=\"saveButton\" onClick={() => console.log('hey')}>Сохранить</Button>\n                </Link>\n            </Panel>\n        </View>\n    );\n}\n\nexport default CreateProfileView;\n","import React from 'react';\nimport {\n    View,\n    Panel,\n    PanelHeader,\n    Card,\n    CardGrid\n\n} from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport Bottompanel from \"./bottompanel\";\nimport './styles/app.css'\nimport StartPageView from './views/startPageView'\nimport CreateProfileView from './views/createProfileView'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\nfunction App () {\n    return (\n        <Router>\n            <div>\n                {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n                <Switch>\n                    <Route path=\"/create-user\">\n                        <CreateProfileView />\n                    </Route>\n                    <Route path=\"/events\">\n                        <CreateProfileView />\n                    </Route>\n                    <Route path=\"/\">\n                        <StartPageView />\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n//             <Link to=\"/\">Home</Link>\n//             <Link to=\"/about\">About</Link>\n//             <Link to=\"/users\">Users</Link>\n\nfunction About() {\n    return <h2>About</h2>;\n}\n\nfunction Users() {\n    return <h2>Users</h2>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/start_image.0f29e8e4.png\";"],"sourceRoot":""}